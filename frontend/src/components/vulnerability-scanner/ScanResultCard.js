import React from 'react';
import { 
  Box, 
  VStack, 
  HStack, 
  Text, 
  Badge, 
  Divider, 
  Accordion,
  AccordionItem,
  AccordionButton,
  AccordionPanel,
  AccordionIcon,
  Tooltip,
  Link,
  Flex,
  Icon
} from '@chakra-ui/react';
import { FaExclamationTriangle, FaExclamationCircle, FaInfoCircle, FaExternalLinkAlt } from 'react-icons/fa';

const SeverityBadge = ({ severity }) => {
  const colorScheme = 
    severity === 'HIGH' ? 'red' : 
    severity === 'MEDIUM' ? 'orange' : 
    severity === 'LOW' ? 'yellow' : 'gray';
  
  const icon = 
    severity === 'HIGH' ? FaExclamationCircle : 
    severity === 'MEDIUM' ? FaExclamationTriangle : 
    FaInfoCircle;
  
  return (
    <Badge colorScheme={colorScheme} px={2} py={1} borderRadius="md">
      <HStack spacing={1}>
        <Icon as={icon} />
        <Text>{severity}</Text>
      </HStack>
    </Badge>
  );
};

const VulnerabilityItem = ({ vulnerability }) => {
  return (
    <AccordionItem>
      <h2>
        <AccordionButton>
          <Box flex="1" textAlign="left">
            <HStack>
              <SeverityBadge severity={vulnerability.severity} />
              <Text fontWeight="bold">{vulnerability.type}</Text>
              <Badge colorScheme="purple" ml={2}>
                {vulnerability.occurrences} {vulnerability.occurrences === 1 ? 'occurrence' : 'occurrences'}
              </Badge>
            </HStack>
          </Box>
          <AccordionIcon />
        </AccordionButton>
      </h2>
      <AccordionPanel pb={4}>
        <VStack align="start" spacing={3}>
          <Text>{vulnerability.description}</Text>
          
          <Box w="100%" p={3} bg="gray.50" borderRadius="md">
            <Text fontWeight="bold" mb={2}>Impact:</Text>
            <Text>
              {vulnerability.type === 'reentrancy' && 
                'Reentrancy vulnerabilities can allow attackers to withdraw funds multiple times before the balance is updated.'}
              {vulnerability.type === 'uncheckedSend' && 
                'Unchecked send operations can lead to silent failures where funds are not transferred but the contract continues execution.'}
              {vulnerability.type === 'txOrigin' && 
                'Using tx.origin for authorization can make contracts vulnerable to phishing attacks.'}
              {vulnerability.type === 'integerOverflow' && 
                'Integer overflow can lead to unexpected behavior, including bypassing balance checks.'}
              {vulnerability.type === 'selfDestruct' && 
                'Self-destruct functions can be used to forcibly destroy contracts and send funds to an attacker.'}
              {vulnerability.type === 'delegateCall' && 
                'Delegatecall executes code in the context of the calling contract, which can lead to storage manipulation.'}
              {vulnerability.type === 'randomNumberGen' && 
                'Using block properties for randomness is predictable and can be manipulated by miners.'}
              {vulnerability.type === 'unprotectedFunction' && 
                'Unprotected functions can be called by anyone, potentially allowing unauthorized access to critical functionality.'}
            </Text>
          </Box>
          
          <Box w="100%" p={3} bg="gray.50" borderRadius="md">
            <Text fontWeight="bold" mb={2}>Recommendation:</Text>
            <Text>
              {vulnerability.type === 'reentrancy' && 
                'Implement the checks-effects-interactions pattern. Update state before making external calls.'}
              {vulnerability.type === 'uncheckedSend' && 
                'Always check the return value of send/transfer operations and handle failures appropriately.'}
              {vulnerability.type === 'txOrigin' && 
                'Use msg.sender instead of tx.origin for authorization checks.'}
              {vulnerability.type === 'integerOverflow' && 
                'Use SafeMath library for arithmetic operations or use Solidity 0.8.0+ which has built-in overflow checks.'}
              {vulnerability.type === 'selfDestruct' && 
                'Ensure self-destruct functionality is properly protected with access controls.'}
              {vulnerability.type === 'delegateCall' && 
                'Be extremely careful with delegatecall and ensure the target contract is trusted and cannot be changed.'}
              {vulnerability.type === 'randomNumberGen' && 
                'Use a secure source of randomness such as Chainlink VRF or commit-reveal schemes.'}
              {vulnerability.type === 'unprotectedFunction' && 
                'Implement proper access control mechanisms such as onlyOwner or role-based access control.'}
            </Text>
          </Box>
          
          <Link href={`https://consensys.github.io/smart-contract-best-practices/attacks/${vulnerability.type}`} isExternal color="blue.500">
            <HStack>
              <Text>Learn more about this vulnerability</Text>
              <Icon as={FaExternalLinkAlt} />
            </HStack>
          </Link>
        </VStack>
      </AccordionPanel>
    </AccordionItem>
  );
};

const ScanResultCard = ({ result }) => {
  if (!result) {
    return (
      <Box p={4} borderWidth="1px" borderRadius="md" bg="gray.50">
        <Text color="gray.500" textAlign="center">No scan results available</Text>
      </Box>
    );
  }
  
  const { address, timestamp, vulnerabilities } = result;
  const date = new Date(timestamp).toLocaleString();
  
  const highSeverityCount = vulnerabilities.filter(v => v.severity === 'HIGH').length;
  const mediumSeverityCount = vulnerabilities.filter(v => v.severity === 'MEDIUM').length;
  const lowSeverityCount = vulnerabilities.filter(v => v.severity === 'LOW').length;
  
  return (
    <Box>
      <VStack align="stretch" spacing={4}>
        <Box>
          <Text fontWeight="bold">Contract Address:</Text>
          <Tooltip label={address}>
            <Text>{address}</Text>
          </Tooltip>
        </Box>
        
        <Box>
          <Text fontWeight="bold">Scan Time:</Text>
          <Text>{date}</Text>
        </Box>
        
        <Divider />
        
        <Box>
          <Text fontWeight="bold" mb={2}>Vulnerability Summary:</Text>
          <Flex justify="space-between" wrap="wrap" gap={2}>
            <Badge colorScheme="red" p={2} borderRadius="md">
              <HStack>
                <Icon as={FaExclamationCircle} />
                <Text>{highSeverityCount} High Severity</Text>
              </HStack>
            </Badge>
            <Badge colorScheme="orange" p={2} borderRadius="md">
              <HStack>
                <Icon as={FaExclamationTriangle} />
                <Text>{mediumSeverityCount} Medium Severity</Text>
              </HStack>
            </Badge>
            <Badge colorScheme="yellow" p={2} borderRadius="md">
              <HStack>
                <Icon as={FaInfoCircle} />
                <Text>{lowSeverityCount} Low Severity</Text>
              </HStack>
            </Badge>
            <Badge colorScheme="blue" p={2} borderRadius="md">
              <Text>{vulnerabilities.length} Total Issues</Text>
            </Badge>
          </Flex>
        </Box>
        
        <Divider />
        
        <Box>
          <Text fontWeight="bold" mb={2}>Detailed Findings:</Text>
          {vulnerabilities.length > 0 ? (
            <Accordion allowMultiple>
              {vulnerabilities.map((vulnerability, index) => (
                <VulnerabilityItem key={index} vulnerability={vulnerability} />
              ))}
            </Accordion>
          ) : (
            <Box p={4} borderWidth="1px" borderRadius="md" bg="green.50">
              <Text color="green.500" textAlign="center">No vulnerabilities detected</Text>
            </Box>
          )}
        </Box>
        
        <Box p={3} bg="blue.50" borderRadius="md">
          <Text fontSize="sm" color="blue.600">
            Note: This is a demonstration of vulnerability scanning capabilities. For a comprehensive security audit, 
            please consult with professional smart contract auditors.
          </Text>
        </Box>
      </VStack>
    </Box>
  );
};

export default ScanResultCard; 
import React from 'react';
import { 
  Box, 
  VStack, 
  HStack, 
  Text, 
  Badge, 
  Button, 
  Divider,
  Icon,
  Tooltip,
  useColorModeValue
} from '@chakra-ui/react';
import { FaExclamationTriangle, FaExclamationCircle, FaInfoCircle, FaSearch } from 'react-icons/fa';

const SeverityIcon = ({ severity }) => {
  const icon = 
    severity === 'HIGH' ? FaExclamationCircle : 
    severity === 'MEDIUM' ? FaExclamationTriangle : 
    FaInfoCircle;
  
  const color = 
    severity === 'HIGH' ? 'red.500' : 
    severity === 'MEDIUM' ? 'orange.500' : 
    'yellow.500';
  
  return <Icon as={icon} color={color} boxSize={5} />;
};

const VulnerabilityList = ({ updates, onSelectContract }) => {
  const bgHover = useColorModeValue('gray.700', 'gray.600');
  
  if (!updates || updates.length === 0) {
    return (
      <Box p={4} borderWidth="1px" borderRadius="md" bg="gray.700">
        <Text color="gray.300" textAlign="center">No vulnerability updates available</Text>
      </Box>
    );
  }
  
  return (
    <VStack spacing={3} align="stretch">
      {updates.map((update, index) => {
        if (update.type !== 'new_scan' || !update.data) return null;
        
        const { address, timestamp, vulnerabilities } = update.data;
        const date = new Date(timestamp).toLocaleString();
        
        // Count vulnerabilities by severity
        const highSeverity = vulnerabilities.filter(v => v.severity === 'HIGH').length;
        const mediumSeverity = vulnerabilities.filter(v => v.severity === 'MEDIUM').length;
        const lowSeverity = vulnerabilities.filter(v => v.severity === 'LOW').length;
        
        return (
          <Box 
            key={index} 
            p={4} 
            borderWidth="1px" 
            borderRadius="md" 
            bg="gray.800"
            _hover={{ bg: bgHover }}
            transition="background-color 0.2s"
          >
            <VStack align="stretch" spacing={2}>
              <HStack justify="space-between">
                <HStack>
                  <Text fontWeight="bold" color="gray.100">Contract:</Text>
                  <Tooltip label={address}>
                    <Text color="gray.300">{`${address.substring(0, 6)}...${address.substring(38)}`}</Text>
                  </Tooltip>
                </HStack>
                <Text fontSize="sm" color="gray.400">{date}</Text>
              </HStack>
              
              <Divider borderColor="gray.600" />
              
              <HStack spacing={4}>
                {highSeverity > 0 && (
                  <HStack>
                    <SeverityIcon severity="HIGH" />
                    <Badge colorScheme="red">{highSeverity} High</Badge>
                  </HStack>
                )}
                
                {mediumSeverity > 0 && (
                  <HStack>
                    <SeverityIcon severity="MEDIUM" />
                    <Badge colorScheme="orange">{mediumSeverity} Medium</Badge>
                  </HStack>
                )}
                
                {lowSeverity > 0 && (
                  <HStack>
                    <SeverityIcon severity="LOW" />
                    <Badge colorScheme="yellow">{lowSeverity} Low</Badge>
                  </HStack>
                )}
                
                <Badge colorScheme="blue">{vulnerabilities.length} Total</Badge>
              </HStack>
              
              <Box>
                <Text fontWeight="bold" color="gray.100">Top Issues:</Text>
                <VStack align="start" mt={1} spacing={1}>
                  {vulnerabilities.slice(0, 2).map((vulnerability, vIndex) => (
                    <HStack key={vIndex}>
                      <SeverityIcon severity={vulnerability.severity} />
                      <Text color="gray.300">{vulnerability.description}</Text>
                    </HStack>
                  ))}
                  
                  {vulnerabilities.length > 2 && (
                    <Text fontSize="sm" color="gray.400">
                      And {vulnerabilities.length - 2} more issues...
                    </Text>
                  )}
                </VStack>
              </Box>
              
              <Button 
                size="sm" 
                colorScheme="blue" 
                leftIcon={<FaSearch />}
                onClick={() => onSelectContract(address)}
                alignSelf="flex-end"
              >
                View Details
              </Button>
            </VStack>
          </Box>
        );
      })}
    </VStack>
  );
};

export default VulnerabilityList; 
import React, { useState, useEffect } from 'react';
import { Box, Heading, Text, VStack, HStack, Button, useToast, Flex, Spinner, Badge } from '@chakra-ui/react';
import { FaSearch, FaPlay, FaStop, FaExclamationTriangle } from 'react-icons/fa';
import axios from 'axios';
import io from 'socket.io-client';
import ContractSearchForm from '../components/vulnerability-scanner/ContractSearchForm';
import VulnerabilityList from '../components/vulnerability-scanner/VulnerabilityList';
import ScanResultCard from '../components/vulnerability-scanner/ScanResultCard';
import SampleContractsList from '../components/vulnerability-scanner/SampleContractsList';

const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:3000';
const SOCKET_URL = process.env.REACT_APP_SOCKET_URL || 'http://localhost:3000';

const VulnerabilityScanner = () => {
  const [isInitialized, setIsInitialized] = useState(false);
  const [isScanning, setIsScanning] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [scanResults, setScanResults] = useState({});
  const [selectedContract, setSelectedContract] = useState(null);
  const [sampleContracts, setSampleContracts] = useState([]);
  const [realtimeUpdates, setRealtimeUpdates] = useState([]);
  const toast = useToast();
  
  // Initialize socket connection
  useEffect(() => {
    const socket = io(SOCKET_URL);
    
    socket.on('connect', () => {
      console.log('Connected to socket server');
      socket.emit('subscribe-vulnerability-scanner');
    });
    
    socket.on('vulnerability-update', (data) => {
      console.log('Received vulnerability update:', data);
      
      // Add to realtime updates
      setRealtimeUpdates(prev => [data, ...prev].slice(0, 10));
      
      // Update scan results
      if (data.type === 'new_scan' && data.data) {
        setScanResults(prev => ({
          ...prev,
          [data.data.address]: data.data
        }));
        
        toast({
          title: 'New Vulnerability Detected',
          description: `Found ${data.data.vulnerabilities.length} vulnerabilities in contract ${data.data.address.substring(0, 8)}...`,
          status: 'warning',
          duration: 5000,
          isClosable: true,
          position: 'top-right',
        });
      }
    });
    
    socket.on('disconnect', () => {
      console.log('Disconnected from socket server');
    });
    
    // Clean up on unmount
    return () => {
      socket.disconnect();
    };
  }, [toast]);
  
  // Fetch sample contracts on mount
  useEffect(() => {
    const fetchSampleContracts = async () => {
      try {
        const response = await axios.get(`${API_URL}/api/vulnerability-scanner/sample-contracts`);
        if (response.data.success) {
          setSampleContracts(response.data.data);
        }
      } catch (error) {
        console.error('Error fetching sample contracts:', error);
      }
    };
    
    fetchSampleContracts();
  }, []);
  
  const handleInitialize = async () => {
    setIsLoading(true);
    try {
      const response = await axios.get(`${API_URL}/api/vulnerability-scanner/initialize`);
      if (response.data.success) {
        setIsInitialized(true);
        toast({
          title: 'Scanner Initialized',
          description: 'Vulnerability scanner has been initialized successfully.',
          status: 'success',
          duration: 3000,
          isClosable: true,
        });
      }
    } catch (error) {
      console.error('Error initializing scanner:', error);
      toast({
        title: 'Initialization Failed',
        description: error.response?.data?.message || 'Failed to initialize vulnerability scanner.',
        status: 'error',
        duration: 5000,
        isClosable: true,
      });
    } finally {
      setIsLoading(false);
    }
  };
  
  const handleStartScanning = async () => {
    if (!isInitialized) {
      toast({
        title: 'Scanner Not Initialized',
        description: 'Please initialize the scanner first.',
        status: 'warning',
        duration: 3000,
        isClosable: true,
      });
      return;
    }
    
    setIsLoading(true);
    try {
      const response = await axios.post(`${API_URL}/api/vulnerability-scanner/start-scanning`);
      if (response.data.success) {
        setIsScanning(true);
        toast({
          title: 'Scanning Started',
          description: 'Real-time vulnerability scanning has started.',
          status: 'info',
          duration: 3000,
          isClosable: true,
        });
      }
    } catch (error) {
      console.error('Error starting scanner:', error);
      toast({
        title: 'Failed to Start Scanning',
        description: error.response?.data?.message || 'Failed to start vulnerability scanning.',
        status: 'error',
        duration: 5000,
        isClosable: true,
      });
    } finally {
      setIsLoading(false);
    }
  };
  
  const handleStopScanning = async () => {
    setIsLoading(true);
    try {
      const response = await axios.post(`${API_URL}/api/vulnerability-scanner/stop-scanning`);
      if (response.data.success) {
        setIsScanning(false);
        toast({
          title: 'Scanning Stopped',
          description: 'Vulnerability scanning has been stopped.',
          status: 'info',
          duration: 3000,
          isClosable: true,
        });
      }
    } catch (error) {
      console.error('Error stopping scanner:', error);
      toast({
        title: 'Failed to Stop Scanning',
        description: error.response?.data?.message || 'Failed to stop vulnerability scanning.',
        status: 'error',
        duration: 5000,
        isClosable: true,
      });
    } finally {
      setIsLoading(false);
    }
  };
  
  const handleScanContract = async (address) => {
    setIsLoading(true);
    try {
      const response = await axios.post(`${API_URL}/api/vulnerability-scanner/scan-contract`, { address });
      if (response.data.success) {
        // Update scan results
        setScanResults(prev => ({
          ...prev,
          [address]: response.data.data
        }));
        
        // Set as selected contract
        setSelectedContract(address);
        
        toast({
          title: 'Contract Scanned',
          description: `Found ${response.data.data.vulnerabilities.length} vulnerabilities.`,
          status: 'success',
          duration: 3000,
          isClosable: true,
        });
      }
    } catch (error) {
      console.error('Error scanning contract:', error);
      toast({
        title: 'Scan Failed',
        description: error.response?.data?.message || 'Failed to scan contract.',
        status: 'error',
        duration: 5000,
        isClosable: true,
      });
    } finally {
      setIsLoading(false);
    }
  };
  
  return (
    <Box p={5} color="gray.100">
      <Heading mb={6} color="white">Blockchain Vulnerability Scanner</Heading>
      
      <Flex direction={{ base: 'column', lg: 'row' }} gap={6}>
        <Box flex="1" p={5} borderWidth="1px" borderRadius="lg" bg="gray.800" boxShadow="xl">
          <VStack spacing={4} align="stretch">
            <Heading size="md" mb={2} color="white">Scanner Controls</Heading>
            
            <HStack spacing={4}>
              <Button 
                leftIcon={<FaSearch />} 
                colorScheme="blue" 
                onClick={handleInitialize} 
                isLoading={isLoading && !isInitialized}
                isDisabled={isInitialized}
              >
                Initialize Scanner
              </Button>
              
              <Button 
                leftIcon={<FaPlay />} 
                colorScheme="green" 
                onClick={handleStartScanning} 
                isLoading={isLoading && !isScanning}
                isDisabled={!isInitialized || isScanning}
              >
                Start Scanning
              </Button>
              
              <Button 
                leftIcon={<FaStop />} 
                colorScheme="red" 
                onClick={handleStopScanning} 
                isLoading={isLoading && isScanning}
                isDisabled={!isScanning}
              >
                Stop Scanning
              </Button>
            </HStack>
            
            <Box mt={4}>
              <Text fontWeight="bold" mb={2} color="gray.100">Status:</Text>
              <HStack>
                <Badge colorScheme={isInitialized ? 'green' : 'gray'} p={2} borderRadius="md">
                  {isInitialized ? 'Scanner Initialized' : 'Scanner Not Initialized'}
                </Badge>
                
                <Badge colorScheme={isScanning ? 'red' : 'gray'} p={2} borderRadius="md">
                  {isScanning ? 'Scanning Active' : 'Scanning Inactive'}
                </Badge>
                
                {isLoading && <Spinner size="sm" />}
              </HStack>
            </Box>
            
            <Box mt={4}>
              <ContractSearchForm onScanContract={handleScanContract} isDisabled={!isInitialized || isLoading} />
            </Box>
            
            <Box mt={4}>
              <Text fontWeight="bold" mb={2} color="gray.100">Sample Contracts (for demo):</Text>
              <SampleContractsList 
                contracts={sampleContracts} 
                onSelectContract={handleScanContract} 
                isDisabled={!isInitialized || isLoading}
              />
            </Box>
          </VStack>
        </Box>
        
        <Box flex="1" p={5} borderWidth="1px" borderRadius="lg" bg="gray.800" boxShadow="xl">
          <VStack spacing={4} align="stretch">
            <Heading size="md" mb={2} color="white">
              {selectedContract ? `Scan Results: ${selectedContract.substring(0, 10)}...` : 'Scan Results'}
            </Heading>
            
            {selectedContract && scanResults[selectedContract] ? (
              <ScanResultCard result={scanResults[selectedContract]} />
            ) : (
              <Box p={5} borderWidth="1px" borderRadius="md" bg="gray.700">
                <Text color="gray.300" textAlign="center">
                  No contract selected. Please scan a contract to see results.
                </Text>
              </Box>
            )}
          </VStack>
        </Box>
      </Flex>
      
      <Box mt={8} p={5} borderWidth="1px" borderRadius="lg" bg="gray.800" boxShadow="xl">
        <Heading size="md" mb={4} color="white">
          <HStack>
            <FaExclamationTriangle color="orange" />
            <Text>Real-time Vulnerability Alerts</Text>
            {isScanning && <Spinner size="sm" color="orange.500" />}
          </HStack>
        </Heading>
        
        {realtimeUpdates.length > 0 ? (
          <VulnerabilityList 
            updates={realtimeUpdates} 
            onSelectContract={(address) => {
              setSelectedContract(address);
            }} 
          />
        ) : (
          <Box p={5} borderWidth="1px" borderRadius="md" bg="gray.700">
            <Text color="gray.300" textAlign="center">
              No real-time updates yet. Start scanning to see vulnerability alerts.
            </Text>
          </Box>
        )}
      </Box>
    </Box>
  );
};

export default VulnerabilityScanner; 